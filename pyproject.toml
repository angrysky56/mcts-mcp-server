[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcts-mcp-server"
version = "0.1.0"
description = "A Monte Carlo Tree Search MCP server with multiple LLM provider support."
authors = [
    { name = "angrysky56"},
]
requires-python = ">=3.10"
readme = "README.md"

dependencies = [
    # Core MCP and async support
    "mcp>=1.0.0",
    "httpx>=0.25.0,<1.0.0",
    # LLM Provider packages
    "google-genai>=1.20.0,<2.0.0",
    "openai>=1.0.0,<2.0.0",
    "anthropic>=0.54.0,<1.0.0",
    # Ollama support
    "ollama>=0.1.0,<1.0.0",
    # Core MCTS dependencies (required for import)
    "numpy>=1.24.0,<3.0.0",
    "scikit-learn>=1.3.0,<2.0.0",
    # Data handling and utilities
    "python-dotenv>=1.0.0,<2.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "typing-extensions>=4.5.0",
    # Logging and monitoring
    "structlog>=23.0.0,<26.0.0",
    # Configuration and state management
    "pyyaml>=6.0,<7.0.0",
    "jsonschema>=4.17.0,<5.0.0",
    # CLI and display utilities
    "click>=8.1.0,<9.0.0",
    "rich>=13.0.0,<15.0.0",
    "psutil>=7.0.0",
]

[project.optional-dependencies]
dev = [
    # Code quality and formatting
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",

    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",

    # Development utilities
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
]

# Optional extras for specific features
analysis = [
    "matplotlib>=3.7.0,<4.0.0",
    "seaborn>=0.12.0,<1.0.0",
    "plotly>=5.15.0,<6.0.0",
    "pandas>=2.0.0,<3.0.0",
]

algorithms = [
    "numpy>=1.24.0,<3.0.0",
    "scikit-learn>=1.3.0,<2.0.0",
    "scipy>=1.10.0,<2.0.0",
]

full = [
    "mcts-mcp-server[dev,analysis,algorithms]",
]

[project.scripts]
mcts-mcp-server = "mcts_mcp_server.server:cli_main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Tool configurations
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR2004", "S106"]

[tool.black]
target-version = ['py310']
line-length = 88

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=mcts_mcp_server",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
